/*!
 * Simple chat program Server.cpp
 *
 * Copyright (c) 2017 Kim Sang Yeon
 */

#include <iostream>
#include <cstring>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <cstdlib>
#include <ctime>
#include <unistd.h>
#include <pthread.h>
#include <sstream>
#include <vector>
using namespace std;
typedef int SOCKET;

SOCKET newConnection;

typedef struct Pos {
	int x1, y1;
	int x2, y2;
}Pos;

string getPoint() {
	Pos pos;
	string str = "";
	stringstream ss;
	srand((unsigned)time(NULL));
	pos.x1 = rand() % 50 + 1;
	ss << pos.x1; str += ss.str() + ',';
	pos.y1 = rand() % 50 + 1;
	ss << pos.y1; str += ss.str() + ',';
	pos.x2 = pos.x1 + (rand() % 300 + 1);
	ss << pos.x2; str += ss.str() + ',';
	pos.y2 = pos.y1 + (rand() % 300 + 1);
	ss << pos.y2; str += ss.str() + ',';
	return str;
}

void *ClientHandlerThread(void *ptr){
    uint32_t bufferlength;
    while(true){
        string pos = getPoint();
		recv(newConnection, &bufferlength, sizeof(uint32_t), NULL); //메세지의 사이즈 알아냄
		bufferlength = ntohl(bufferlength);
		vector<uint8_t> buffer;
		buffer.resize(bufferlength, 0x00);
		recv(newConnection, &(buffer[0]), bufferlength, NULL); //클라이언트로 부터 메시지 받음

		uint32_t posLength = pos.size();
		send(newConnection, &posLength, sizeof(uint32_t), NULL);
		send(newConnection, pos.c_str(), posLength, NULL);
    }
}

int main(){
    int portNum = 10000;
    char *ip_addr = "127.0.0.1";
    int sListen;
    pthread_t clientHandler;
    sockaddr_in sock_addr;
    socklen_t addr_len = sizeof(sock_addr);
    sock_addr.sin_addr.s_addr = inet_addr(ip_addr);
    sock_addr.sin_family = AF_INET;
    sock_addr.sin_port = htons(portNum);

    sListen = socket(AF_INET, SOCK_STREAM, NULL);
    bind(sListen, (sockaddr*)&sock_addr, sizeof(sock_addr));

    cout << "클라이언트와 연결 시도 중" << endl;
    listen(sListen, SOMAXCONN);

    newConnection = accept(sListen, (struct sockaddr*)&sock_addr, &addr_len);
    if(newConnection == 0){
        cout << "클라이언트와 연결 실패" << endl;
    }
    else{
        cout << "클라이언트와 연결 성공" << endl;
        string MOTD = "테스트 메세지입니다.";
        uint32_t MOTD_Len = htonl(MOTD.size());
        cout << MOTD_Len << endl;
        send(newConnection, &MOTD_Len, sizeof(uint32_t), NULL);
        send(newConnection, MOTD.c_str(), MOTD_Len, NULL);
        int x= 0;
        pthread_create(&clientHandler,NULL, ClientHandlerThread, &x);
    }
    pthread_join(clientHandler, NULL);
    system("pause");
    return 0;
}
